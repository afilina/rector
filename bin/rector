#!/usr/bin/env php
<?php

declare(strict_types=1);

use Rector\Configuration\Configuration;
use Rector\DependencyInjection\RectorContainerFactory;
use Rector\Set\Set;
use Symfony\Component\Console\Input\ArgvInput;
use Rector\Console\Application;
use Symplify\PackageBuilder\Reflection\PrivatesCaller;
use Symplify\SetConfigResolver\ConfigResolver;

@ini_set('memory_limit', '-1'); // @ intentionally: continue anyway

// Performance boost
gc_disable();

// Require Composer autoload.php
/////////////////////////////////////////////////////

function includeProjectsAutoload(string $composerJsonPath, string $cwd): void
{
    $contents = file_get_contents($composerJsonPath);

    $composerSettings = json_decode($contents, true);
    if (! is_array($composerSettings)) {
        die(sprintf('Failed to load "%s"', $composerJsonPath));
    }

    $vendorPath = $composerSettings['config']['vendor-dir'] ?? $cwd . '/vendor';
    if (! is_dir($vendorPath)) {
        die(sprintf('Please check if "composer install" was run already (expected to find "%s")', $vendorPath));
    }

    require $vendorPath . '/autoload.php';
}

$cwd = getcwd();

$projectAutoload = $cwd . '/vendor/autoload.php';
if (is_file($projectAutoload)) {
    require $projectAutoload;
}

// is autolaod successful?
if (!class_exists('Rector\HttpKernel\RectorKernel')) {
    $possibleAutoloadPaths = [
        // dev repository or prefixed rector
        __DIR__ . '/../vendor/autoload.php',
        // composer require
        __DIR__ . '/../../../../vendor/autoload.php',
    ];

    foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
        if (is_file($possibleAutoloadPath)) {
            require $possibleAutoloadPath;
            break;
        }
    }

    $composerJsonPath = $cwd . '/composer.json';
    if (file_exists($composerJsonPath)) {
        includeProjectsAutoload($composerJsonPath, $cwd);
    } else {
        die(
        sprintf(
            'Composer autoload.php was not found in paths "%s". Have you ran "composer update"?',
            implode('", "', $possibleAutoloadPaths)
        )
        );
    }
}

try {
    $configs = [];
    $configResolver = new ConfigResolver();

    // Detect configuration from --set
    $input = new ArgvInput();

    $setConfig = $configResolver->resolveSetFromInputAndDirectory($input, Set::SET_DIRECTORY);
    if ($setConfig !== null) {
        $configs[] = $setConfig;
    }

    // And from --config or default one
    $inputOrFallbackConfig = $configResolver->resolveFromInputWithFallback($input, ['rector.yml', 'rector.yaml']);
    if ($inputOrFallbackConfig !== null) {
        $configs[] = $inputOrFallbackConfig;
    }

    // resolve: parameters > sets
    $parameterSetsConfigs = $configResolver->resolveFromParameterSetsFromConfigFiles($configs, Set::SET_DIRECTORY);
    if ($parameterSetsConfigs !== []) {
        $configs = array_merge($configs, $parameterSetsConfigs);
    }

    // Build DI container
    $rectorContainerFactory = new RectorContainerFactory();
    $container = $rectorContainerFactory->createFromConfigs($configs);

    /** @var Configuration $configuration */
    $configuration = $container->get(Configuration::class);
    $configuration->setFirstResolverConfig($configResolver->getFirstResolvedConfig());
} catch (Throwable $throwable) {
    $symfonyStyle = (new \Rector\Console\Style\SymfonyStyleFactory(new PrivatesCaller()))->create();
    $symfonyStyle->error($throwable->getMessage());
    exit(1);
}

$application = $container->get(Application::class);
exit($application->run());
